package ru.practicum.handler.sensor.type;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.practicum.handler.sensor.SensorEventHandler;
import ru.practicum.kafka.KafkaEventProducer;
import ru.practicum.mapper.ProtoMapper;
import ru.yandex.practicum.grpc.telemetry.event.SensorEventProto;
import ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro;
import java.time.Instant;

@Slf4j
@Component
@RequiredArgsConstructor
public class ClimateSensorEventHandler implements SensorEventHandler {

    private final KafkaEventProducer kafkaProducer;
    private final ProtoMapper protoMapper;
    String sensorEventsTopic = "telemetry.sensors.v1";

    @Override
    public SensorEventProto.PayloadCase getMessageType() {
        return SensorEventProto.PayloadCase.CLIMATE_SENSOR_EVENT;
    }

    @Override
    public void handle(SensorEventProto event) {
        // –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 1: —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if (event.getPayloadCase() != SensorEventProto.PayloadCase.CLIMATE_SENSOR_EVENT) {
            log.error("üö® CRITICAL ERROR: ClimateSensorEventHandler –ø–æ–ª—É—á–∏–ª –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–∏–ø: {}. –û–∂–∏–¥–∞–ª—Å—è: CLIMATE_SENSOR_EVENT",
                    event.getPayloadCase());
            return;
        }

        // –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 2: –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (!event.hasClimateSensorEvent()) {
            log.error("üö® CRITICAL ERROR: ClimateSensorEventHandler - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç climate –¥–∞–Ω–Ω—ã–µ");
            return;
        }

        var climateData = event.getClimateSensorEvent();

        log.info("‚úÖ ClimateSensorEventHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ Climate —Å–æ–±—ã—Ç–∏—è - hubId={}, sensorId={}, temp={}¬∞C, humidity={}%, co2={}",
                event.getHubId(),
                event.getId(),
                climateData.getTemperatureC(),
                climateData.getHumidity(),
                climateData.getCo2Level());

        var avroEvent = protoMapper.toAvro(event);

        // –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 3: —Ç–∏–ø payload –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞
        Object payload = avroEvent.getPayload();
        if (!(payload instanceof ClimateSensorAvro)) {
            log.error("üö® CRITICAL ERROR: –ü–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞ –æ–∂–∏–¥–∞–ª—Å—è ClimateSensorAvro, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {}",
                    payload != null ? payload.getClass().getSimpleName() : "NULL");
            return;
        }

        kafkaProducer.send(sensorEventsTopic, event.getHubId(), Instant.now(), avroEvent);

        log.info("‚úÖ Climate —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka: hubId={}, sensorId={}",
                event.getHubId(), event.getId());
    }
}