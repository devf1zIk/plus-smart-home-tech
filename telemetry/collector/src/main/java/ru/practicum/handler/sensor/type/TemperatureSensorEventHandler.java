package ru.practicum.handler.sensor.type;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.practicum.handler.sensor.SensorEventHandler;
import ru.practicum.kafka.KafkaEventProducer;
import ru.practicum.mapper.ProtoMapper;
import ru.yandex.practicum.grpc.telemetry.event.SensorEventProto;
import ru.yandex.practicum.kafka.telemetry.event.TemperatureSensorAvro;
import java.time.Instant;

@Slf4j
@Component
@RequiredArgsConstructor
public class TemperatureSensorEventHandler implements SensorEventHandler {

    private final KafkaEventProducer kafkaProducer;
    private final ProtoMapper protoMapper;
    String sensorEventsTopic = "telemetry.sensors.v1";


    @Override
    public SensorEventProto.PayloadCase getMessageType() {
        return SensorEventProto.PayloadCase.TEMPERATURE_SENSOR_EVENT;
    }

    @Override
    public void handle(SensorEventProto event) {
        // –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ Temperature —Å–æ–±—ã—Ç–∏—è
        if (event.getPayloadCase() != SensorEventProto.PayloadCase.TEMPERATURE_SENSOR_EVENT) {
            log.error("üö® CRITICAL ERROR: TemperatureSensorEventHandler –ø–æ–ª—É—á–∏–ª –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–∏–ø: {}. –û–∂–∏–¥–∞–ª—Å—è: TEMPERATURE_SENSOR_EVENT",
                    event.getPayloadCase());
            return;
        }

        var temp = event.getTemperatureSensorEvent();
        log.info("‚úÖ TemperatureSensorEventHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ Temperature —Å–æ–±—ã—Ç–∏—è - hub={}, temp={}¬∞C/{}¬∞F",
                event.getHubId(), temp.getTemperatureC(), temp.getTemperatureF());

        var avroEvent = protoMapper.toAvro(event);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ payload
        Object payload = avroEvent.getPayload();
        if (!(payload instanceof TemperatureSensorAvro)) {
            log.error("üö® CRITICAL ERROR: –ü–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞ –æ–∂–∏–¥–∞–ª—Å—è TemperatureSensorAvro, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {}",
                    payload != null ? payload.getClass().getSimpleName() : "NULL");
            return;
        }

        kafkaProducer.send(sensorEventsTopic, event.getHubId(), Instant.now(), avroEvent);

        log.info("‚úÖ Temperature —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka");
    }
}