grpc:
  client:
    hub-router:
      address: "static://localhost:59090"
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext
spring:
  application:
    name: analyzer

  datasource:
    url: jdbc:postgresql://localhost:5432/smarthome
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      continue-on-error: false
      separator: ";"
      encoding: UTF-8

  kafka:
    bootstrap-servers: localhost:9092

    consumer:
      group-id: analyzer-snapshots-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: ru.yandex.practicum.kafka.telemetry.serialization.SensorsSnapshotDeserializer
      properties:
        specific.avro.reader: true
      enable-auto-commit: false
      auto-offset-reset: earliest
      max-poll-records: 100

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: ru.yandex.practicum.kafka.telemetry.serialization.GeneralAvroSerializer
      properties:
        acks: all
        linger.ms: 5
        batch.size: 16384
        buffer.memory: 33554432

analyzer:
  topics:
    snapshots: telemetry.snapshots.v1
    hub-events: telemetry.hubs.v1

logging:
  level:
    root: INFO
    org.springframework.kafka: INFO
    ru.yandex.practicum: DEBUG